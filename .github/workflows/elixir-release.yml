name: Build, Test, and Release Elixir Package

on:
  push:
    branches:
      - master
      - main
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches:
      - master
      - main
      - develop
      - 'release/**'
  release:
    types: [published]

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.15"
  OTP_VERSION: "26.2.5"

jobs:
  # Determine next version using semantic-release
  version:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      actions: read
      checks: read
      pull-requests: read
    outputs:
      current_version: ${{ steps.current.outputs.version }}
      next_version: ${{ steps.semantic.outputs.version }}
      should_release: ${{ steps.semantic.outputs.should_release }}
      is_prerelease: ${{ steps.semantic.outputs.is_prerelease }}
      is_initial_release: ${{ steps.semantic.outputs.is_initial_release }}
      tag: ${{ steps.semantic.outputs.tag }}
      release_notes: ${{ steps.semantic.outputs.release_notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Get current version from mix.exs
        id: current
        run: |
          CURRENT_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version in mix.exs: ${CURRENT_VERSION}"

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release (dry-run mode)
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "master",
              "main",
              {
                "name": "develop",
                "prerelease": "beta"
              },
              {
                "name": "release/**",
                "prerelease": "rc"
              }
            ],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": false},
                    {"type": "style", "release": false},
                    {"type": "chore", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ]
            ]
          }
          EOF

      - name: Get next version from semantic-release
        id: semantic
        run: |
          # Removed set -e to see all errors
          set -x  # Enable command tracing for debugging
          
          echo "=== DEBUG: Starting version determination ==="
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event: ${{ github.event_name }}"
          echo "Current working directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git log (last 5 commits):"
          git log --oneline -5
          echo "=== END DEBUG INFO ==="
          
          if [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [ "${{ github.event_name }}" = "push" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              
              # Run semantic-release in dry-run mode to get next version
              echo "Running semantic-release dry-run..."
              
              # Capture both stdout and stderr, handle errors gracefully
              SEMANTIC_OUTPUT=""
              SEMANTIC_EXIT_CODE=0
              
              if command -v semantic-release >/dev/null 2>&1; then
                SEMANTIC_OUTPUT=$(semantic-release --dry-run 2>&1) || SEMANTIC_EXIT_CODE=$?
              else
                echo "ERROR: semantic-release command not found"
                SEMANTIC_EXIT_CODE=1
              fi
              
              echo "Semantic-release exit code: $SEMANTIC_EXIT_CODE"
              echo "Semantic-release output:"
              echo "$SEMANTIC_OUTPUT"
              
              # Try to extract version from output
              NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP 'The next release version is \K[^\s]+' || echo "")
              
              if [ -z "$NEXT_VERSION" ] || [ $SEMANTIC_EXIT_CODE -ne 0 ]; then
                echo "No new version determined by semantic-release or semantic-release failed"
                echo "This might be because:"
                echo "1. No commits since last release warrant a version bump"
                echo "2. No conventional commits found"
                echo "3. All recent commits are chore/docs/ci type"
                
                # Check if there are existing releases/tags
                LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                COMMITS_SINCE_TAG=0
                
                if [ -n "$LATEST_TAG" ]; then
                  # There are existing tags, check commits since last tag
                  COMMITS_SINCE_TAG=$(git rev-list --count ${LATEST_TAG}..HEAD 2>/dev/null || echo "0")
                  echo "Latest tag: $LATEST_TAG"
                  echo "Commits since latest tag: $COMMITS_SINCE_TAG"
                else
                  # No tags exist, count all commits
                  COMMITS_SINCE_TAG=$(git rev-list --count HEAD 2>/dev/null || echo "0")
                  echo "No existing tags found"
                  echo "Total commits: $COMMITS_SINCE_TAG"
                fi
                
                CURRENT_VERSION="${{ steps.current.outputs.version }}"
                
                # If there are commits but semantic-release didn't bump version,
                # it means no conventional commits warrant a release
                if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
                  echo "There are $COMMITS_SINCE_TAG unreleased commits, but none warrant a version bump"
                  echo "Recent commits that don't trigger releases typically include:"
                  echo "- chore: maintenance tasks"
                  echo "- docs: documentation updates"  
                  echo "- ci: workflow changes"
                  echo "- style: formatting changes"
                  echo ""
                  echo "To trigger a release, use conventional commits like:"
                  echo "- feat: new feature (minor bump)"
                  echo "- fix: bug fix (patch bump)"
                  echo "- feat!: breaking change (major bump)"
                fi
                
                echo "No release needed - keeping current version"
                echo "version=${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
                echo "tag=v${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
                echo "should_release=false" >> $GITHUB_OUTPUT
              else
                echo "Next version determined: ${NEXT_VERSION}"
                echo "version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
                echo "tag=v${NEXT_VERSION}" >> $GITHUB_OUTPUT
                echo "should_release=true" >> $GITHUB_OUTPUT
                
                # Extract release notes
                RELEASE_NOTES=$(echo "$SEMANTIC_OUTPUT" | sed -n '/# [0-9]/,/^$/p' | head -n -1 || echo "Release $NEXT_VERSION")
                echo "release_notes<<EOF" >> $GITHUB_OUTPUT
                echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              fi
            else
              echo "Not a push event, skipping release"
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "version=${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
              echo "tag=v${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" =~ ^refs/heads/(develop|release/.*)$ ]]; then
            if [ "${{ github.event_name }}" = "push" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              
              # For develop/release branches, create beta/rc versions
              CURRENT_VERSION="${{ steps.current.outputs.version }}"
              BRANCH_NAME="${{ github.ref_name }}"
              SHORT_SHA="${{ github.sha }}"
              SHORT_SHA=${SHORT_SHA:0:7}
              
              if [[ "$BRANCH_NAME" == "develop" ]]; then
                NEXT_VERSION="${CURRENT_VERSION}-beta.${SHORT_SHA}"
              else
                NEXT_VERSION="${CURRENT_VERSION}-rc.${SHORT_SHA}"
              fi
              
              echo "version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
              echo "tag=v${NEXT_VERSION}" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "version=${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
              echo "tag=v${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "Branch not configured for releases"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "version=${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=v${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning
  security:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Update version in mix.exs
  update-version:
    runs-on: ubuntu-22.04
    needs: [version]
    if: needs.version.outputs.should_release == 'true' && needs.version.outputs.current_version != needs.version.outputs.next_version
    permissions:
      contents: write
    outputs:
      version_updated: ${{ steps.update.outputs.updated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in mix.exs
        id: update
        run: |
          CURRENT_VERSION="${{ needs.version.outputs.current_version }}"
          NEW_VERSION="${{ needs.version.outputs.next_version }}"
          
          echo "Updating version from ${CURRENT_VERSION} to ${NEW_VERSION}"
          
          # Update version in mix.exs
          sed -i "s/version: \"${CURRENT_VERSION}\"/version: \"${NEW_VERSION}\"/" mix.exs
          
          # Verify the update
          UPDATED_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
          if [ "$UPDATED_VERSION" != "$NEW_VERSION" ]; then
            echo "Version update failed. Expected: $NEW_VERSION, Got: $UPDATED_VERSION"
            exit 1
          fi
          
          echo "Version successfully updated to: $UPDATED_VERSION"
          echo "updated=true" >> $GITHUB_OUTPUT

      - name: Commit version update
        if: steps.update.outputs.updated == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the version update
          git add mix.exs
          git commit -m "chore: bump version to ${{ needs.version.outputs.next_version }} [skip ci]"
          git push origin ${{ github.ref_name }}

  # Build, test, and analyze Elixir package
  build-and-test:
    runs-on: ubuntu-22.04
    needs: [version, security, update-version]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')
    strategy:
      matrix:
        elixir: ['1.15']
        otp: ['26.2.5']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      MIX_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    outputs:
      coverage-report: ${{ steps.test.outputs.coverage }}
      hex-package: ${{ steps.package.outputs.package-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Ensure we get the latest commit with version update

      - name: Pull latest changes
        if: needs.update-version.outputs.version_updated == 'true'
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
          version-type: strict

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Verify version
        run: |
          CURRENT_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
          echo "Current version in mix.exs: ${CURRENT_VERSION}"
          echo "Expected version: ${{ needs.version.outputs.next_version }}"

      - name: Check formatting
        run: mix format --check-formatted

      - name: Compile with warnings as errors
        run: mix compile --warnings-as-errors

      - name: Run Credo static analysis
        run: mix credo --strict

      - name: Run Dialyzer type checking
        run: mix dialyzer

      - name: Run tests with coverage
        id: test
        run: |
          mix coveralls.json
          COVERAGE=$(cat cover/excoveralls.json | jq -r '.total_coverage')
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cover/excoveralls.json
          fail_ci_if_error: false

      - name: Generate documentation
        run: |
          mix deps.get
          mix docs
        env:
          MIX_ENV: dev

      - name: Build Hex package
        id: package
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'
        run: |
          mix hex.build
          PACKAGE_NAME=$(ls *.tar | head -1)
          echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload package artifact
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'
        uses: actions/upload-artifact@v4
        with:
          name: hex-package
          path: "*.tar"

      - name: Upload documentation artifact
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/

  # Create Git tags for successful builds
  tag:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.event_name == 'push' && needs.build-and-test.result == 'success' && needs.version.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Create and push Git tag
        run: |
          TAG_NAME="${{ needs.version.outputs.tag }}"
          VERSION="${{ needs.version.outputs.next_version }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, skipping tag creation"
            exit 0
          fi
          
          # Create tag
          git tag -a "$TAG_NAME" -m "Release $VERSION"
          git push origin "$TAG_NAME"
          echo "Created tag: $TAG_NAME"

  # Create manual changelog
  changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog
        run: |
          echo "=== CHANGELOG GENERATION ==="
          VERSION="${{ needs.version.outputs.next_version }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Creating Keep a Changelog format for version: $VERSION"
          
          # Create or update CHANGELOG.md with proper Keep a Changelog format
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            cat > CHANGELOG.md << 'EOF'
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

EOF
          fi
          
          # Get commits since last tag, categorized by type
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            RANGE="${LAST_TAG}..HEAD"
          else
            RANGE="HEAD"
          fi
          
          # Extract commits by conventional type and map to Keep a Changelog categories
          ADDED=$(git log $RANGE --oneline --grep="^feat" --pretty=format:"- %s" | sed 's/^feat[^:]*: /- /' || echo "")
          CHANGED=$(git log $RANGE --oneline --grep="^refactor\|^perf" --pretty=format:"- %s" | sed 's/^[^:]*: /- /' || echo "")
          DEPRECATED=$(git log $RANGE --oneline --grep="^deprecate" --pretty=format:"- %s" | sed 's/^[^:]*: /- /' || echo "")
          REMOVED=$(git log $RANGE --oneline --grep="^remove" --pretty=format:"- %s" | sed 's/^[^:]*: /- /' || echo "")
          FIXED=$(git log $RANGE --oneline --grep="^fix" --pretty=format:"- %s" | sed 's/^fix[^:]*: /- /' || echo "")
          SECURITY=$(git log $RANGE --oneline --grep="security\|^sec" --pretty=format:"- %s" | sed 's/^[^:]*: /- /' || echo "")
          
          echo "Found changes:"
          echo "Added: $ADDED"
          echo "Changed: $CHANGED" 
          echo "Fixed: $FIXED"
          echo "Security: $SECURITY"
          
          # Create new version entry
          NEW_ENTRY=""
          NEW_ENTRY+="## [$VERSION] - $DATE"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          
          [ -n "$ADDED" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Added"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$ADDED"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          [ -n "$CHANGED" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Changed"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$CHANGED"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          [ -n "$DEPRECATED" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Deprecated"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$DEPRECATED"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          [ -n "$REMOVED" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Removed"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$REMOVED"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          [ -n "$FIXED" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Fixed"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$FIXED"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          [ -n "$SECURITY" ] && NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Security"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"$SECURITY"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          
          # If no categorized commits found, add a generic entry
          if [ -z "$ADDED" ] && [ -z "$CHANGED" ] && [ -z "$FIXED" ] && [ -z "$SECURITY" ] && [ -z "$DEPRECATED" ] && [ -z "$REMOVED" ]; then
            NEW_ENTRY+=

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"### Changed"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'"- Release $VERSION"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi\n'
          fi
          
          # Insert new version after [Unreleased] section
          awk -v new_entry="$NEW_ENTRY" '
          /^## \[Unreleased\]/ {
            print
            # Skip any content under [Unreleased] until next version or EOF
            while ((getline) > 0 && !/^## \[/) {
              # Skip unreleased content
            }
            print ""
            print new_entry
            if (!/^## \[/) print  # Print the line that broke the loop if it exists
            next
          }
          { print }
          ' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md with Keep a Changelog format"

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            echo "Committing changelog changes"
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Changelog committed and pushed"
          fi

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies for publish
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-publish-
            ${{ runner.os }}-mix-

      - name: Install dependencies for publishing
        run: |
          mix local.hex --force
          mix local.rebar --force
          MIX_ENV=dev mix deps.get
        env:
          MIX_ENV: dev

      - name: Publish to Hex.pm
        run: |
          echo "Publishing version ${{ needs.version.outputs.next_version }} to Hex.pm"
          MIX_ENV=dev mix hex.publish --yes
        env:
          MIX_ENV: dev
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create manual changelog if semantic-release fails
  manual-changelog:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Generate changelog manually
        run: |
          echo "=== CHANGELOG DEBUG ==="
          echo "Version: ${{ needs.version.outputs.next_version }}"
          echo "Should release: ${{ needs.version.outputs.should_release }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Working directory: $(pwd)"
          echo "Git status before:"
          git status
          echo "========================"
          
          VERSION="${{ needs.version.outputs.next_version }}"
          TAG="${{ needs.version.outputs.tag }}"
          DATE=$(date +%Y-%m-%d)
          
          echo "Checking for existing CHANGELOG.md..."
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "Creating new CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "CHANGELOG.md already exists"
            echo "Current content:"
            head -10 CHANGELOG.md
          fi
          
          # Get commits since last tag
          echo "Finding commits since last tag..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: ${LAST_TAG:-none}"
          
          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG..."
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          else
            echo "No previous tags, getting all commits..."
            COMMITS=$(git log --oneline --grep="^feat\|^fix\|^perf\|^refactor" --pretty=format:"- %s (%h)" || echo "")
          fi
          
          echo "Found commits:"
          echo "$COMMITS"
          
          # Insert new version at top
          echo "Updating CHANGELOG.md..."
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS"
            else
              echo "- Release $VERSION"
            fi
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          echo "Updated CHANGELOG.md content:"
          head -15 CHANGELOG.md
          
          echo "Git status after:"
          git status

      - name: Commit changelog
        run: |
          echo "=== COMMIT DEBUG ==="
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Checking for changes..."
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md detected"
          else
            echo "Changes detected in CHANGELOG.md:"
            git diff CHANGELOG.md
            
            echo "Adding CHANGELOG.md..."
            git add CHANGELOG.md
            
            echo "Committing changes..."
            if git commit -m "docs: update changelog for ${{ needs.version.outputs.next_version }} [skip ci]"; then
              echo "Commit successful"
              
              echo "Pushing changes..."
              if git push origin ${{ github.ref_name }}; then
                echo "Push successful"
              else
                echo "Push failed with exit code: $?"
                echo "Git remote info:"
                git remote -v
                echo "Current branch:"
                git branch -a
              fi
            else
              echo "Commit failed with exit code: $?"
            fi
          fi

  # Create GitHub release with full semantic-release
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release for actual release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, tag, publish, deploy-docs, manual-changelog, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ needs.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Next Version:** ${{ needs.version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Release:** ${{ needs.version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi