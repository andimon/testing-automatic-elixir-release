name: Build, Test, and Release Elixir Package

on:
  push:
    branches:
      - master
      - main
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches:
      - master
      - main
      - develop
      - 'release/**'
  release:
    types: [published]

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.15"
  OTP_VERSION: "26.2.5"  # Fixed: Use specific patch version for ubuntu-22.04

jobs:
  # Determine semantic version and release type
  version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
      should_release: ${{ steps.version.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "master",
              "main",
              {
                "name": "develop",
                "prerelease": "beta"
              },
              {
                "name": "release/**",
                "prerelease": "rc"
              }
            ],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": false},
                    {"type": "style", "release": false},
                    {"type": "chore", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "mix.exs"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [ "${{ github.event_name }}" = "push" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              # Get next version from semantic-release
              NEXT_VERSION=$(semantic-release --dry-run 2>/dev/null | grep -oP 'The next release version is \K[^\s]+' || echo "")
              if [ -z "$NEXT_VERSION" ]; then
                echo "version=latest" >> $GITHUB_OUTPUT
                echo "tag=latest" >> $GITHUB_OUTPUT
              else
                echo "version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
                echo "tag=v${NEXT_VERSION}" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            # Generate version based on branch
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            BRANCH_NAME=${BRANCH_NAME//\//-}
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "version=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "tag=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning
  security:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build, test, and analyze Elixir package
  build-and-test:
    runs-on: ubuntu-22.04
    needs: [version, security]
    strategy:
      matrix:
        elixir: ['1.15']
        otp: ['26']  # Fixed: Changed from '25' to '26' to match env
        exclude:
          # Updated exclusion rules for correct version combinations
          - elixir: '1.14'
            otp: '27'
          - elixir: '1.16'
            otp: '25'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      MIX_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    outputs:
      coverage-report: ${{ steps.test.outputs.coverage }}
      hex-package: ${{ steps.package.outputs.package-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
          version-type: strict

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Compile with warnings as errors
        run: mix compile --warnings-as-errors

      - name: Run Credo static analysis
        run: |
          mix credo --strict

      - name: Run Dialyzer type checking
        run: |
          mix dialyzer

      - name: Run tests with coverage
        id: test
        run: |
          mix coveralls.json
          COVERAGE=$(cat cover/excoveralls.json | jq -r '.total_coverage')
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cover/excoveralls.json
          fail_ci_if_error: false

      - name: Generate documentation
        run: |
          mix docs

      - name: Build Hex package
        id: package
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'  # Fixed: Updated condition to match matrix
        run: |
          mix hex.build
          PACKAGE_NAME=$(ls *.tar | head -1)
          echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload package artifact
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'  # Fixed: Updated condition to match matrix
        uses: actions/upload-artifact@v4
        with:
          name: hex-package
          path: "*.tar"

      - name: Upload documentation artifact
        if: matrix.elixir == '1.15' && matrix.otp == '26.2.5'  # Fixed: Updated condition to match matrix
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/

  # Update mix.exs version and create tags
  update-version:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: needs.version.outputs.should_release == 'true'
    permissions:
      contents: write
    outputs:
      updated-version: ${{ steps.update.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Update version in mix.exs
        id: update
        run: |
          NEW_VERSION="${{ needs.version.outputs.version }}"
          echo "Updating version to: $NEW_VERSION"
          
          # Update version in mix.exs
          sed -i "s/version: \"[^\"]*\"/version: \"$NEW_VERSION\"/" mix.exs
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the version update
          git add mix.exs
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Create Git tags for all successful builds
  tag:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, update-version]
    if: github.event_name == 'push' && needs.build-and-test.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push Git tag
        run: |
          TAG_NAME="${{ needs.version.outputs.tag }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Pull latest changes (in case version was updated)
          git pull origin $BRANCH_NAME
          
          # Create different tag types based on branch
          case "$BRANCH_NAME" in
            "master"|"main")
              echo "Main branch tagging handled by semantic-release"
              ;;
            "develop")
              git tag -a "dev-${TAG_NAME}" -m "Development build ${TAG_NAME}"
              git push origin "dev-${TAG_NAME}"
              echo "Created development tag: dev-${TAG_NAME}"
              ;;
            release/*)
              RELEASE_VERSION=${BRANCH_NAME#release/}
              git tag -a "rc-${RELEASE_VERSION}-${TAG_NAME}" -m "Release candidate ${RELEASE_VERSION}"
              git push origin "rc-${RELEASE_VERSION}-${TAG_NAME}"
              echo "Created release candidate tag: rc-${RELEASE_VERSION}-${TAG_NAME}"
              ;;
            hotfix/*)
              HOTFIX_VERSION=${BRANCH_NAME#hotfix/}
              git tag -a "hotfix-${HOTFIX_VERSION}-${TAG_NAME}" -m "Hotfix ${HOTFIX_VERSION}"
              git push origin "hotfix-${HOTFIX_VERSION}-${TAG_NAME}"
              echo "Created hotfix tag: hotfix-${HOTFIX_VERSION}-${TAG_NAME}"
              ;;
            feature/*)
              if [[ "${{ github.event.head_commit.message }}" == *"[create-tag]"* ]]; then
                FEATURE_NAME=${BRANCH_NAME#feature/}
                git tag -a "feat-${FEATURE_NAME}-${TAG_NAME}" -m "Feature ${FEATURE_NAME} snapshot"
                git push origin "feat-${FEATURE_NAME}-${TAG_NAME}"
                echo "Created feature tag: feat-${FEATURE_NAME}-${TAG_NAME}"
              fi
              ;;
            *)
              echo "No tagging strategy defined for branch: $BRANCH_NAME"
              ;;
          esac

  # Publish to Hex.pm (conditional)
  publish:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, update-version, tag]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && vars.PUBLISH_TO_HEX == 'true'
    permissions:
      contents: write
      packages: write
    environment: 
      name: hex-production
      url: https://hex.pm/packages/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Publish decision
        id: publish_decision
        run: |
          if [ "${{ vars.PUBLISH_TO_HEX }}" = "true" ]; then
            echo "Publishing to Hex.pm"
            mix hex.publish --yes
          elif [ "${{ vars.PUBLISH_TO_GITHUB }}" = "true" ]; then
            echo "Publishing to GitHub Packages"
            # Configure mix.exs for GitHub registry
            mix hex.publish --repo github --yes
          else
            echo "Skipping publication - package built but not published"
            echo "Package available as artifact only"
          fi
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create release and update changelog
  release:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, update-version, tag, publish, deploy-docs]
    if: needs.version.outputs.should_release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21.1.2 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/github@9.2.1 conventional-changelog-conventionalcommits@6.1.0

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master", "main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "*.tar",
                      "name": "hex-package-${nextRelease.version}.tar",
                      "label": "Hex Package"
                    },
                    {
                      "path": "CHANGELOG.md",
                      "name": "CHANGELOG.md",
                      "label": "Changelog"
                    }
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hex-package

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Create release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-22.04
    needs: [version, build-and-test, update-version, tag, publish, deploy-docs, release]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📦 Elixir Package Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ **Build & Test:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${{ needs.build-and-test.outputs.coverage-report }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "📚 **Documentation:** Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "⚠️ **Documentation:** Failed to deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Documentation:** Only deployed from main/master branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🚀 **Hex.pm Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "**Package:** https://hex.pm/packages/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **Hex.pm Publication:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Hex.pm Publication:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "🎉 **GitHub Release:** Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version.outputs.should_release }}" = "true" ]; then
            echo "⚠️ **GitHub Release:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **GitHub Release:** Not applicable for this branch/event" >> $GITHUB_STEP_SUMMARY
          fi